    - name: Check yum add repos
      shell: > 
        yum repolist |sed -ne '/repo id/,$p'|awk '(NR!=1){print $1}' |
        egrep -o "^(epel|remi-safe|ius|MariaDB)"
      args:
        warn: no
      register: _yum_add_repo_list
    
    - command: echo {{item}}
      loop: "{{_yum_add_repo_list.stdout_lines}}"
      when: item != "epel"
    


  # vars:
  #   port: 3306
  #   socket: "/var/lib/mysql/mysql.sock"
  #   datadir: "/var/lib/mysql"
  # handlers:
  #   - name: restart mysqld
  #     service: name=mysqld state=restarted

    - name: SELinuxのDisable状態の確認
      shell: "getenforce"
      register: selinux_result

  # ===================
  # (shellモジュール:)2秒スリープしたのち再起動する
  #
  # (async/pollモジュール:)「async=終了まで待つ時間」、「poll=終了までチェックする間隔」
  # asyncで指定しpollでのチェック間隔で終了チェックをし続け、終わらなければエラーとなる
  # 以下の場合、poll=0を設定しており、ポーリングは行われず且つasyncの時間を待たずに完全に非同期処理となり
  # 次のタスクを実行する
  #
  # (whenモジュール:)で上記で変数指定したselinux_resultのstdout(標準出力結果)
  # がdisable以外の場合のみ再起動する(whenはif文と同様)
  #
  # ignore_errorsは全てのサーバで【 shell: sleep 2 && shutdown -r now "サーバ再起動"】が失敗しても処理を終了せず
  # 次のタスクを実行するが、今回のようなshutdownは特別でSSH接続自体が出来なくなる為、ignore_errorsは効果が出ない
  #
  # 待たずに次のタスクを行う
  # ===================
     - name: SELinuxのDisableでない場合サーバ再起動
      shell: sleep 2 && shutdown -r now "サーバ再起動"
      async: 1
      poll: 0
#      ignore_errors: true
      when: selinux_result.stdout != "Disabled"

# ===================
# 上記のタスクはasyncモジュールを使用しているので完了前に当該タスクが呼ばれる事になる
# wait_for
# delayの値の間待機したのち
# hostの
# portに接続できるまで1秒(デフォルト)間隔で接続しに行く
# 以下の設定では
# inventory_hostname(Ansibleが設定しているサーバ)に対して20秒待ってから
# 22ポートに対して接続を300秒間(デフォルト)待ち続ける設定になる
# ただし、当該タスクも条件(whenモジュール)に指定の
# selinux_resultのstdout(標準出力結果)
# がdisable以外の場合のみ再起動する(whenはif文と同様)
# ===================
    - name: SELinuxのDisableでない場合サーバ再起動待ち
      local_action: wait_for host={{ inventory_hostname }} port=22 delay=10
      when: selinux_result.stdout != "Disabled"
    # always
    - name: docker start
      yum: name="{{item.name}}" enablerepo="{{item.repo}}" state=present
      with_items:
        - {name: mysql,        repo: remi}
        - {name: mysql-server, repo: remi}
        - {name: mysql-devel,  repo: remi}
    - name: template my.cnf
      template: src=etc/my.j2 dest=/etc/my.cnf mode=0644
      notify: restart mysqld
    - name: permit bin files
      file: path={{item}} mode=0744
      with_fileglob:
        - /root/bin/*
    - name: register
      shell: touch /tmp/hoge creates=/tmp/hoge
      register: result
    - name: print result
      debug: msg="rc:{{result.rc}} stdout:{{result.stdout}} stdout:{{result.stderr}}"
      when: result.stdout == ""

