- hosts: 127.0.0.1
  connection: local
  become: yes
  become_user: root
  gather_facts: no

  tasks:
    - file: path=/usr/etc/ansible state=directory directory_mode=yes

    - name: yum add repos
      yum: 
        name: "{{ repos }}"
      vars: 
        repos:
          - epel-release
          - http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
          - https://centos7.iuscommunity.org/ius-release.rpm

    - name: add MariaDb-client repos
      yum_repository:
        name: MariaDB
        description: MariaDB 10.3 CentOS repository list - created 2019-04-30 03:51 UTC
        baseurl: http://yum.mariadb.org/10.3/centos7-amd64
        gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
        gpgcheck: yes

    - name: yum update
      yum: name=* state=latest

    # SELinux's disabled
    - name: Check SELinux's state
      command: "getenforce"
      register: _selinux
    - name: SELinux's disabled
      import_tasks: subtasks/selinux.yml
      when: _selinux.stdout != "Disabled"

    - name: install general commands
      yum: name={{commands}} state=latest
      vars: 
        commands: [curl, wget, man, tig, gcc, make, autoconf, patch, git2u]

    - name: install MariaDB-client, redis
      yum: name={{commands}} state=latest
      vars: 
        commands: [redis, MariaDB-client]

    # set aws-cli
    - name: install python3
      yum: name={{python_packages}}
      vars:
        python_packages:
          - python36u
          - python36u-libs
          - python36u-devel
          - python36u-pip
    - name: install aws-cli
      pip: 
        name: "{{modules}}"
        executable: pip3.6
        extra_args: --upgrade
      vars:
        modules: [ pip, awscli ]
    #  aws configure
    - file: path=/root/.aws state=directory directory_mode=yes
    - name: aws configure set
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        owner: root
        group: root
        mode: 0600
      with_items: 
        - {src: templates/aws/credentials.ini, dest: /root/.aws/credentials}
        - {src: templates/aws/config.ini, dest: /root/.aws/config}
    
    # docker setup
    - name: check create docker link
      shell: docker network ls|grep -q common_link; echo $?
      register: _has_common_link
    - name: create docker link
      command: /usr/bin/docker network create --driver bridge common_link
      when: _has_common_link.stdout != '0'
